====== Linked Data on 4Store ======
/* Please provide a brief description of the tool, and upload a screenshot if possible. Include details of the tool creator. */

This page provides details of how to install the [[http://4store.org/|4Store]] triple store, configure it, and post IATI data into it. 

===== Detailed Description =====
/* Provide additional details here */

===== Documentation =====
/* Provide links to documentation, or use the wiki to develop documentation of this tool. */

This guide is based on starting with a blank Ubuntu 10 LTS [[http://www.turnkeylinux.org/core|Turnkey Core server image]]. This can be run in a Virtual machine or cloud hosting. The instructions may work for other Ubuntu systems, but will need adapting for different flavours of linux. 

==== Install 4Store ====

  * Install the dependencies as listed at [[http://4store.org/trac/wiki/Dependencies]].

  apt-get install build-essential libpcre3-dev librasqal2-dev libtool libraptor1-dev libglib2.0-dev ncurses-dev libreadline-dev automake uuid-dev libavahi-core-dev libavahi-glib-dev libavahi-client-dev avahi-daemon

  * Install Raptor2 and RASQL from source

  wget http://download.librdf.org/source/raptor2-2.0.8.tar.gz
  tar xzf raptor2-2.0.8.tar.gz; rm raptor2-2.0.8.tar.gz
  cd raptor2-2.0.8/
  apt-get install yajl-tools
  ./configure
  make
  make check
  make install
  ldconfig
  
  wget http://download.librdf.org/source/rasqal-0.9.29.tar.gz
  tar xzf rasqal-0.9.29.tar.gz
  rm rasqal-0.9.29.tar.gz
  cd rasqal-0.9.29.tar.gz
  ./configure
  make
  make install

  * Checkout the 4store code from Git

  git clone https://github.com/garlik/4store.git

  * Build 4store

  cd 4store
  sh autogen.sh
  ./configure
  make
  make install
==== Setup Store ====

Setup a backend database for IATI data

  4s-backend-setup iati

Launch the backend

  4s-backend iati
  
Set up a HTTP server for it:

  4s-httpd iati -p 8080

<note warning>**Security Note:** Check that you have a firewall that only permits access to certain ports in place in front of the server you are running, otherwise any user can post data to your triple store. The TurnkeyHub Core image comes pre-configured with an EC2 firewall.</note>

==== Setup Apache for Reverse Proxy & Access Control ====

Install apache and enable reverse proxy

  apt-get install apache2
  a2enmod proxy_http

Configure /etc/apache2/sites-available with the following configuration

  <VirtualHost *:80>
  
  ServerAdmin webmaster@localhost
  
  ProxyRequests Off
  ProxyPreserveHost On
  <Proxy *>
      Order allow,deny
      Allow from all
  </Proxy>
  
  ProxyPass /status http://localhost:8080/status
  ProxyPassReverse /status http://localhost:8080/status
  ProxyPass /test http://localhost:8080/test
  ProxyPassReverse /test http://localhost:8080/test
  ProxyPass /sparql http://localhost:8080/sparql
  ProxyPassReverse /sparql http://localhost:8080/sparql
  
  #Logging
  ErrorLog /var/log/apache2/error.log
  
  # Possible values include: debug, info, notice, warn, error, crit,
  # alert, emerg.
  LogLevel warn
  
  CustomLog /var/log/apache2/access.log combined
  
  </VirtualHost>

  * Restart Apache (and if necessary allow port 80 through on your firewall)

  /etc/init.d/apache2 restart

It should now be possible to access /status/ etc. on the server, but not to make post requests to /data/, preventing third parties adding data to the server. 

==== Set 4Store to run on launch ====

Based on [[https://github.com/mhgrove/4Store-API/blob/master/init.4store|Michael Grove's script on GitHub]]. 

  #!/bin/sh
  #
  # Linux startup script for 4store
  # chkconfig: 2345 99 20
  # description: Run an 4store backend and sparql http server
  # processname: 4store
  #
  # To install, configure this file as needed and copy
  # to /etc/rc.d/init.d as 4store.  Then use "# /sbin/chkconfig 4store reset"
  
  KB="iati"
  PORT="8080"
  
  case "$1" in
    start)
	  echo "Starting 4store"
	  4s-backend $KB
	  4s-httpd -p $PORT $KB
	  ;;
    stop)
	  killall "4s-httpd"
	  pkill -f '^4s-backend'
	  ;;
    restart)
	  $0 stop
	  $0 start
	  ;;
    *)
	  echo "Usage: $0 {start|stop|restart}"
	  exit 1
  esac
  
  exit 0
===== Links, source code and development plans =====
/* Please provide links to any source code, additional resources, or development plans*/