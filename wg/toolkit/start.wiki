====== Aid Information Toolkit ======
{{:tools:toolkit:openaidtoolkit.png?200 |}}
Linked to work on the idea of a [[roadmap:create_iati_public_good_architecture_blueprints|Public Good Infrastructure]] we have been exploring the idea of creating a distribution of open source tools that all work together to perform key data access and use functions.

A full outline of the 'Open Aid Information Toolkit' idea [[https://docs.google.com/document/pub?id=1hsBLPzBxL3FQ7WdRutLlE19iw7pY_7k14e1I_p9zm3E|can be found in this document]].

This page can be used to start scoping out that work.

{{:tools:toolkit:toolkitlayers.png|}}

===== Desirable features / Architecture =====

//What features would be desirable in a set of tools.//

A powerful and interoperable set of scripts

  * Able to run across platforms
  * Shared configuration (e.g. for working directories etc.)
  * Able to be connected together as a pipeline of tools

Developer friendly
  * Command line tools;
  * Open source;

User friendly
  * Accessible web-based front end
  * Cloud version available
  * Easy to install and deploy

Managing provenance
  * Should make it possible to understand what has happened to data along a processing pipeline

====== Tools required ======

==== Registry download tool ====

For fetching any changed packages for a given query. 

[[sync_tools|Sync Tools Development Notes]]

== Related tools ==

  * [[http://packages.python.org/datapkg/|DataPkg]] is a command line tool for uploading or downloading data from CKAN
  * [[http://pypi.python.org/pypi/ckanclient|CKAN Client]] is a Python library for working with CKAN
  * [[https://github.com/okfn/iatitools/blob/master/1-iatidownload.py|OKFN IATI Tools]] includes scripts for downloading IATI data

==== Validation tool ====

For validating IATI XML files.

Should be able to:
  * Check for well formed data
  * Validate against the schema
  * Check for codelist values

[[validation_tool|Validation Tool Development Notes]]

==== Currency Conversion ====

This component should be able to read in any IATI XML file and convert transaction and budget values from one currency to another. This requires:

  * **An open list of historic currency conversion rates** - no comprehensive data exists, but it should be possible to use one or more of the datasets on [[http://datahub.io/dataset?q=currency+conversion|the datahub]] to generate reasonably granular conversion tables for most major currencies. 
    * API based solutions may be possible, but a large conversion process could involve thousands of transactions, exceeding the limits of most free APIs.
    * It would be useful to have scripts that automatically update conversion tables 
  * **A process to read in IATI XML files and to work out the current currency and value-date of any transaction / budget**
    * Currencies may be provided in a @default-currency attribute of an iati-activity, or at the level of an [[http://iatistandard.org/activities-standard/financial-transaction/transaction-value|individual transaction value]]
    * [[http://iatistandard.org/activities-standard/financial-transaction|Transactions]] **should** provide a [[http://iatistandard.org/activities-standard/financial-transaction/transaction-value|@value-date]] that is used for currency conversions (i.e. the currency rate from this date should be used to convert this number)
    * Note that slightly different logic might be required to handle [[http://iatistandard.org/activities-standard/financial/activity-budgets|budget]] and [[http://iatistandard.org/activities-standard/financial/planned-disbursements|planned disbursement]] values.
  * **A process to write the converted values back to the file**
    * Ideally there would be the option to either overwrite the current currency values, changing default / element level currency in the process **or** to add a duplicate transaction in the new currency.

==== Provenance module ====
====== Design patterns ======

  * We need environment variables that can be shared across scripts
  * We need a shared logging framework

Consider a model with a **master script** and then a set of **plugins**. Scripts would be executed from the master script to allow use of the same logging framework etc. 

[[Script interface]]

Look at
  * [[http://eventlet.net/doc/design_patterns.html|Eventlet]] to support parallel processing
  * Python [[http://docs.python.org/library/logging.html|Logging]] module.

====== Distribution Management =====

We need a light-weight structure to manage a community of contributors. Consider [[http://dl.acm.org/citation.cfm?doid=567793.567795|learning from the Open Source community]]. 

====== Links, source code and development plans ======
/* Please provide links to any source code, additional resources, or development plans*/

See [[http://openhatch.org/]] for ideas around supporting open source communities.